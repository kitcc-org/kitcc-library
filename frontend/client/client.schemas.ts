/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * KITCC Library API
 * OpenAPI spec version: 1.0.0
 */
export type LoginBody = {
  email: string;
  /**
   * @minLength 8
   * @pattern ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]+$
   */
  password: string;
};

/**
 * 貸出数が在庫数を超えているリクエスト
 */
export type UpsertLoans409 = {
  bookId: number;
  userId: number;
  volume: number;
};

export type UpsertLoans404 = {
  bookId: number;
  userId: number;
};

export type UpsertLoansBodyItem = {
  bookId: number;
  userId: number;
  volume: number;
};

export type GetLoans200LoansItem = {
  books?: Book;
  loans?: Loan;
  users?: User;
};

export type GetLoans200 = {
  loans: GetLoans200LoansItem[];
  totalLoan: number;
};

export type GetLoansSort = typeof GetLoansSort[keyof typeof GetLoansSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetLoansSort = {
  NUMBER_0: '0',
  NUMBER_1: '1',
  NUMBER_2: '2',
  NUMBER_3: '3',
  NUMBER_4: '4',
  NUMBER_5: '5',
} as const;

export type GetLoansParams = {
/**
 * 貸出履歴を取得するユーザーのID
 */
userId?: string;
/**
 * 貸出履歴を取得する書籍のID
 */
bookId?: string;
/**
 * ページ番号
 */
page?: string;
/**
 * 1ページあたりの表示数
 */
limit?: string;
/**
 * ソート順 0: ユーザID昇順 1: ユーザID降順 2: 書籍ID昇順 3: 書籍ID降順 4: 貸出日昇順 5: 貸出日降順

 */
sort?: GetLoansSort;
};

export type DeleteUser204 = {
  message?: string;
};

export type UpdateUserBody = {
  email?: string;
  name?: string;
  /**
   * @minLength 8
   * @pattern ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]+$
   */
  password?: string;
};

export type DeleteUsersBody = {
  userIdList: number[];
};

export type CreateUserBody = {
  email: string;
  name: string;
  /**
   * @minLength 8
   * @pattern ^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]+$
   */
  password: string;
};

export type GetUsers200 = {
  /** 総ユーザー数 */
  totalUser: number;
  users: User[];
};

export type GetUsersParams = {
/**
 * ページ番号
 */
page?: string;
/**
 * 1ページあたりの表示数
 */
limit?: string;
/**
 * ユーザー名
 */
name?: string;
/**
 * メールアドレス
 */
email?: string;
};

export type SearchBooks200BooksItem = {
  authors: string[];
  description?: string;
  id: string;
  isbn?: string;
  publishedDate?: string;
  publisher?: string;
  thumbnail?: string;
  title: string;
};

export type SearchBooks200 = {
  books: SearchBooks200BooksItem[];
  /** 総書籍数 */
  totalBook: number;
};

export type SearchBooksParams = {
/**
 * ページ番号
 */
page?: string;
/**
 * 1ページあたりの表示数
 */
limit?: string;
/**
 * 検索キーワード
 */
keyword?: string;
/**
 * タイトル
 */
intitle?: string;
/**
 * 著者
 */
inauthor?: string;
/**
 * 出版社
 */
inpublisher?: string;
/**
 * ISBN
 */
isbn?: string;
};

export type UpdateBookBody = {
  authors?: string[];
  /** @pattern ^\d{10}(\d{3})?$ */
  isbn?: string;
  publishedDate?: string;
  publisher?: string;
  stock?: number;
  title?: string;
};

export type DeleteBooksBody = {
  bookIdList: number[];
};

export type CreateBookBody = {
  authors: string[];
  description: string;
  /** @pattern ^\d{10}(\d{3})?$ */
  isbn: string;
  publishedDate: string;
  publisher: string;
  stock: number;
  thumbnail?: string;
  title: string;
};

export type GetBooks200 = {
  books: Book[];
  /** 総書籍数 */
  totalBook: number;
};

export type GetBooksSort = typeof GetBooksSort[keyof typeof GetBooksSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetBooksSort = {
  NUMBER_0: '0',
  NUMBER_1: '1',
  NUMBER_2: '2',
  NUMBER_3: '3',
} as const;

export type GetBooksParams = {
/**
 * ページ番号
 */
page?: string;
/**
 * 1ページあたりの表示数
 */
limit?: string;
/**
 * タイトル
 */
title?: string;
/**
 * 著者
 */
author?: string;
/**
 * 出版社
 */
publisher?: string;
/**
 * ISBN
 */
isbn?: string;
/**
 * ソート順 0: id昇順 1: id降順 2: 出版日昇順 3: 出版日降順

 */
sort?: GetBooksSort;
};

/**
 * 指定されたリソースが存在しない
 */
export type NotFoundResponse = Error;

/**
 * 適切な認証情報を持たずにリソースにアクセスしようとした
 */
export type UnauthorizedResponse = Error;

/**
 * サーバ内部でエラーが発生した
 */
export type InternalServerErrorResponse = Error;

/**
 * リクエストの構文が誤っている
 */
export type BadRequestResponse = Error;

export interface Loan {
  bookId: number;
  /** レコードが作成されたUNIX時間 */
  createdAt?: number;
  /** レコードが最後に更新されたUNIX時間 */
  updatedAt?: number;
  userId: number;
  volume: number;
}

export interface User {
  email: string;
  id: number;
  name: string;
  /** @nullable */
  sessionToken?: string | null;
}

export interface Error {
  message: string;
}

export interface Book {
  authors: string[];
  description: string;
  id: number;
  /** @pattern ^\d{10}(\d{3})?$ */
  isbn: string;
  publishedDate: string;
  publisher: string;
  stock: number;
  thumbnail?: string;
  title: string;
}

